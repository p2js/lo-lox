    program -> declaration* EOF ;

declaration -> varDecl | statement ;
    varDecl -> "var" IDENTIFIER ("=" expression)? ";" ;

  statement -> exprStmt | ifStmt | forStmt | whileStmt | printStmt | block ;

      block -> "{" declaration* "}" ;

   exprStmt -> expression ";" ;
     ifStmt -> "if" "(" expression ")" statement ( "else" statement )? ; 
    forStmt -> "for" "(" (varDecl | exprStmt | ";") expression? ";" expression? ")" statement ;
  whileStmt -> "while" "(" expression ")" statement ;
  printStmt -> "print" expression ";" ;

 expression -> ternary ;
 assignment -> IDENTIFIER "=" assignment | ternary ;
    ternary -> logic_or ('?' ternary ":" ternary)? ;
   logic_or -> logic_and ("or" logic_and)* ;
  logic_and -> equality ("and" equality)* ;
   equality -> comparison ( ( '==' | '!=' ) comparison )* ;
 comparison -> term ( ( "<" | "<=" | ">" | ">=") term )* ;
       term -> factor ( ( "+" | "-" ) factor )* ;
     factor -> unary ( ( "*" | "/" ) unary)* ;
      unary -> ("!" | "-") unary | primary ;
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER;
